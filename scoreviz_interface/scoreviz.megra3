;; Created Sunday, 2024-06-02, 10:06:52 ... good luck!

;; scoreviz interface

;; connect
(osc-sender 'scoreviz "127.0.0.1:57123")
  
(fun send-whole (voice note)
  (ctrl (osc-send 'scoreviz "/voice/note/add" voice note 'w)))
  
(fun send-note (voice note len articulation)
  (ctrl (osc-send 'scoreviz "/voice/note/add" voice note len articulation)))

(fun send-text-note (voice note len articulation text)
  (ctrl (osc-send 'scoreviz "/voice/note/add" voice note len articulation text)))
  
(fun set-dyn (voice dyn)
  (ctrl (osc-send 'scoreviz "/voice/dyn" voice dyn)))
  
(fun set-clef (voice clef)
  (ctrl (osc-send 'scoreviz "/voice/clef" voice clef)))
  
(fun set-repeat (voice bars)
  (ctrl (osc-send 'scoreviz "/voice/repeatmarks" voice bars)))

(fun global-preview (bars)
  (ctrl (osc-send 'scoreviz "/global/preview" bars)))

(fun set-timesignature (voice upper lower)
  (ctrl (osc-send 'scoreviz "/voice/timesignature" voice upper lower)))
  
(fun set-pad (voice pad)
  (ctrl (osc-send 'scoreviz "/voice/pad" voice pad)))
  
(fun set-pos (voice x y)
  (ctrl (osc-send 'scoreviz "/voice/pos" voice x y)))
  
(fun set-bgcolor (voice bgcol)
  (ctrl (osc-send 'scoreviz "/voice/bgcolor" voice bgcol)))
  
(fun set-label (voice label)
  (ctrl (osc-send 'scoreviz "/voice/label" voice label)))
  
(fun mark-current (voice val) 
  (ctrl (osc-send 'scoreviz "/voice/markcurrent" voice val)))
  
(fun num-notes (voice val) 
  (ctrl (osc-send 'scoreviz "/voice/numnotes" voice val)))
  
(fun textbox (id content x y)
  (ctrl (osc-send 'scoreviz "/textfield/put" id content x y 40 "000" "false" "0")))
  
;; shorthand for textbox
(fun tb (id content x y)
  (ctrl (osc-send 'scoreviz "/textfield/put" id content x y 40 "000" "false" "0")))

;; shorthand for textbox with color
(fun tbcol (id content x y color)
  (ctrl (osc-send 'scoreviz "/textfield/put" id content x y 40 color "false" "0")))

;; shorthand for textbox with flash
(fun tbflash (id content x y flashtime)
  (ctrl (osc-send 'scoreviz "/textfield/put" id content x y 40 "000" "true" flashtime)))

(fun img (id ref x y scale)
  (ctrl (osc-send 'scoreviz "/image/put" id ref x y scale)))

(fun clear-score () 
  (ctrl (osc-send 'scoreviz "/clearall")))

;;define a player, will create the `to-<name>` function that 
;;can be used with `mapper`
(fun player (name clef)
  (progn 
    (osc-send 'scoreviz "/voice/clef" name clef)
    (fun (concat "to-" name) (event)
      (match (ev-param :note event)
        ;; string notes currently only used for rests in this system
        (istype 'str) (send-note 
          name 
          "b/4"
          (concat (to-string (round (ev-param :dur event))) "r")
          "none")
        (istype 'num) (send-note 
          name 
          (mtovex (round (ev-param :note event))) 
          (to-string (round (ev-param :dur event)))
          (ev-param :articulation event)) 
        ))))	
  
(fun singer (name clef)
  (progn 
    (osc-send 'scoreviz "/voice/clef" name clef)
    (fun (concat "to-" name) (event)
      (match (ev-param :note event)
        ;; string notes currently only used for rests in this system
        (istype 'str) (send-note 
          name 
          "b/4"
          (concat (to-string (round (ev-param :dur event))) "r")
          "none")
        (istype 'num) (send-text-note 
          name 
          (mtovex (round (ev-param :note event))) 
          (to-string (round (ev-param :dur event)))
          (ev-param :articulation event)
          (ev-param :syllable event)) 
        ))))	

;; note shorthands
(fun c (oct dur)
  (note (mul oct 12) dur))

(fun cs (oct dur)
  (note (add 1 (mul oct 12)) dur))

(fun d (oct dur)
  (note (add 2 (mul oct 12)) dur))

(fun ds (oct dur)
  (note (add 3 (mul oct 12)) dur))

(fun e (oct dur)
  (note (add 4 (mul oct 12)) dur))

(fun f (oct dur)
  (note (add 5 (mul oct 12)) dur))

(fun fs (oct dur)
  (note (add 6 (mul oct 12)) dur))

(fun g (oct dur)
  (note (add 7 (mul oct 12)) dur))

(fun gs (oct dur)
  (note (add 8 (mul oct 12)) dur))

(fun a (oct dur)
  (note (add 9 (mul oct 12)) dur))

(fun as (oct dur)
  (note (add 10 (mul oct 12)) dur))

(fun b (oct dur)
  (note (add 11 (mul oct 12)) dur))

(fun r (dur) 
  (note "rest" dur))

;; text note shorthands
(fun ly-c (oct dur syl)
  (note (mul oct 12) dur :syl syl))

(fun ly-cs (oct dur syl)
  (note (add 1 (mul oct 12)) dur :syl syl))

(fun ly-d (oct dur syl)
  (note (add 2 (mul oct 12)) dur :syl syl))

(fun ly-ds (oct dur syl)
  (note (add 3 (mul oct 12)) dur :syl syl))

(fun ly-e (oct dur syl)
  (note (add 4 (mul oct 12)) dur :syl syl))

(fun ly-f (oct dur syl)
  (note (add 5 (mul oct 12)) dur :syl syl))

(fun ly-fs (oct dur syl)
  (note (add 6 (mul oct 12)) dur :syl syl))

(fun ly-g (oct dur syl)
  (note (add 7 (mul oct 12)) dur :syl syl))

(fun ly-gs (oct dur syl)
  (note (add 8 (mul oct 12)) dur :syl syl))

(fun ly-a (oct dur syl)
  (note (add 9 (mul oct 12)) dur :syl syl))

(fun lya-s (oct dur syl)
  (note (add 10 (mul oct 12)) dur :syl syl))

(fun ly-b (oct dur syl)
  (note (add 11 (mul oct 12)) dur :syl syl))


(fun with-metro-4 (cycdur metrox metroy score)
  (sx 'cond-metro-12332123 #t   
    ;; visual metronome
    (loop 'metrovis :dur (div cycdur 4)
      (tb "metro" "1" metrox metroy)
      (tb "metro" "2" (add metrox 40) metroy)
      (tb "metro" "3" (add metrox 80) metroy)
      (tb "metro" "4" (add metrox 120) (sub metroy 30))
      )
    ;; fun
    (loop 'conductor :dur (div cycdur 4)
      (tb "face" "o_o" (add metrox 300) metroy)
      (tb "face" "o_O" (add metrox 300) metroy)
      (tb "face" "O_O" (add metrox 300) metroy)
      (tb "face" "O_o" (add metrox 300) metroy)
      )
    score
    )
  )
